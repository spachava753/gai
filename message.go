package gai

import "fmt"

// Role represents what type a Message is
type Role uint

const (
	// User represents the user role in a list of messages
	User Role = iota

	// Assistant represents the assistant role in a list of messages.
	// A Message that has an Assistant role represents content generated
	// by the model
	Assistant

	// ToolResult represents the result of a tool execution.
	// A Message with this role contains the output from a tool that
	// was called during generation. This allows tool results to support
	// multiple Blocks of different Modalities
	ToolResult
)

// Modality represents the type of modality that a Block holds
// The default for Modality is a Text type
type Modality uint

const (
	Text Modality = iota
	Image
	Audio
	Video
)

// String returns the string representation of the modality
func (m Modality) String() string {
	switch m {
	case Text:
		return "text"
	case Image:
		return "image"
	case Audio:
		return "audio"
	case Video:
		return "video"
	default:
		return fmt.Sprintf("unknown modality %d", m)
	}
}

const (
	Content  = "content"
	Thinking = "thinking"
	ToolCall = "tool_call"
)

// Block represents a self-contained piece of a Message, meant to represent a "part" of a message.
// For example, if a message returned by a model contains audio and a tool call, the audio would
// be represented as one block, and the tool call another. Another example is if there are multiple
// tool calls in a response generated by a model, each tool call would be represented by single Block.
type Block struct {
	// ID is optional, it is commonly set when for ToolCall block types,
	// and sometimes for Content type blocks. An empty string means that the ID field
	// is not set
	ID string

	// BlockType is required, and if not set explicitly, the default value is of type Content.
	// - A Content BlockType represents unstructured content of single Modality, like text, images and audio
	// - A Thinking BlockType represents the thinking/reasoning a Generator produced
	// - A ToolCall BlockType represents a tool call by the model
	//
	// Note that a Generator can support more block types than the ones listed above,
	// the above block types are simply a common set of block types that a Generator can return.
	BlockType string

	// ModalityType represents the Modality of the content
	ModalityType Modality

	// MimeType represents the MIME type of the content.
	// Common values include "text/plain", "image/jpeg", "image/png", "audio/mp3", "video/mp4", etc.
	// If empty, defaults to "text/plain"
	MimeType string

	// Content represents the content of the block. It can be any type that implements fmt.Stringer.
	// For non-text modalities like images, audio, or video, the Content's String() method should
	// return base64 encoded data. The MimeType field should be set appropriately to indicate the
	// content type.
	Content fmt.Stringer

	// ExtraFields allows a Generator to store Generator-specific extra information that can used
	// in a later invocation
	ExtraFields map[string]interface{}
}

// Message represents a collection of blocks produced by the user or meant for the assistant.
type Message struct {
	// Role is required, and the default value of Role is User. However, for readability purposes,
	// it is recommended to always set the Role to User or Assistant and not rely on the zero value
	// to make it clear to the reader what type of Message it is
	Role Role

	// Blocks represents the collection of different blocks produced by the User or Assistant
	Blocks []Block

	ToolResultError bool
}

// Dialog represents a dialog between a User and Assistant
type Dialog []Message

// Str is a simple string type that implements fmt.Stringer
type Str string

func (s Str) String() string {
	return string(s)
}
