package gai

import (
	"encoding/base64"
	"encoding/json"
	"fmt"
)

// Role represents what type a Message is
type Role uint

const (
	// User represents the user role in a list of messages
	User Role = iota

	// Assistant represents the assistant role in a list of messages.
	// A Message that has an Assistant role does not necessarily mean
	// that the Message was "generated" by the model. In particular, a tool
	// result message is also represented with an Assistant role, even
	// though the content of a Message that is a tool result would be the
	// result of a tool execution
	Assistant
)

// Modality represents the type of modality that a Block holds
// The default for Modality is a Text type
type Modality uint

const (
	Text Modality = iota
	Image
	Audio
	Video
)

const (
	Content    = "content"
	Thinking   = "thinking"
	ToolCall   = "tool_call"
	ToolResult = "tool_result"
)

// Media represents binary content for non-text modalities such as images, audio, or video.
// It contains the MIME type of the content and the actual binary data.
//
// When encoding to JSON, the Body field is automatically base64 encoded for safe transmission.
// When decoding from JSON, the Body field is automatically base64 decoded from the encoded string.
//
// Example usage:
//
//	// Creating a Media object with image data
//	imageMedia := Media{
//	    Mimetype: "image/jpeg",
//	    Body:     jpegImageBytes,
//	}
//
//	// Creating a Media object with audio data
//	audioMedia := Media{
//	    Mimetype: "audio/mp3",
//	    Body:     mp3AudioBytes,
//	}
type Media struct {
	// Mimetype represents the MIME type of the binary content.
	// Common values include "image/jpeg", "image/png", "audio/mp3", "video/mp4", etc.
	Mimetype string

	// Body contains the raw binary data of the media content.
	// When marshaled to JSON, this field is automatically base64 encoded.
	// When unmarshaled from JSON, this field is automatically base64 decoded.
	Body []byte
}

// MarshalJSON implements the json.Marshaler interface for Media.
// It encodes the Body field as base64 for safe JSON transmission.
func (m *Media) MarshalJSON() ([]byte, error) {
	type MediaAlias struct {
		Mimetype string `json:"mimetype"`
		Body     string `json:"body"` // Will contain base64 encoded data
	}

	encoded := MediaAlias{
		Mimetype: m.Mimetype,
		Body:     base64.StdEncoding.EncodeToString(m.Body),
	}

	return json.Marshal(encoded)
}

// UnmarshalJSON implements the json.Unmarshaler interface for Media.
// It decodes the base64-encoded Body field back to raw bytes.
func (m *Media) UnmarshalJSON(data []byte) error {
	type MediaAlias struct {
		Mimetype string `json:"mimetype"`
		Body     string `json:"body"` // Contains base64 encoded data
	}

	var decoded MediaAlias
	if err := json.Unmarshal(data, &decoded); err != nil {
		return err
	}

	// Decode the base64 string back to bytes
	bodyBytes, err := base64.StdEncoding.DecodeString(decoded.Body)
	if err != nil {
		return fmt.Errorf("failed to decode base64 body: %w", err)
	}

	m.Mimetype = decoded.Mimetype
	m.Body = bodyBytes

	return nil
}

// Block represents a self-contained piece of a Message, meant to represent a "part" of a message.
// For example, if a message returned by a model contains audio and a tool call, the audio would
// be represented as one block, and the tool call another. Another example is if there are multiple
// tool calls in a response generated by a model, each tool call would be represented by single Block.
type Block struct {
	// ID is optional, it is commonly set when for ToolCall and ToolResult Block types,
	// and sometimes for Content type blocks. An empty string means that the ID field
	// is not set
	ID string

	// BlockType is required, and if not set explicitly, the default value is of type Content.
	// - A Content BlockType represents unstructured content of single Modality, like text, images and audio
	// - A Thinking BlockType represents the thinking/reasoning a Generator produced
	// - A ToolCall BlockType represents a tool call by the model
	// - A ToolResult BlockType represents a tool result from the execution of a tool call
	//
	// Note that a Generator can support more block types than the ones listed above,
	// the above block types are simply a common set of block types that a Generator can return.
	BlockType string

	// ModalityType represents the Modality of the content
	ModalityType Modality

	// Content is set when Modality is set to Text.
	// If Content not an empty string, Media must be nil
	Content string

	// Media is set when Modality is set to Image, Audio, or Video.
	// If Media is not a zero value, then Content must be an empty string
	Media Media
}

// Message represents a collection of blocks produced by the user or meant for the assistant.
type Message struct {
	// Role is required, and the default value of Role is User. However, for readability purposes,
	// it is recommended to always set the Role to User or Assistant and not rely on the zero value
	// to make it clear to the reader what type of Message it is
	Role Role

	// Blocks represents the collection of different blocks produced by the User or Assistant
	Blocks []Block
}

// Dialog represents a dialog between a User and Assistant
type Dialog []Message
